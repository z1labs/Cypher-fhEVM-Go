// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: kms.proto

package kms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KmsEndpoint_ValidateAndDecrypt_FullMethodName   = "/kms.KmsEndpoint/Validate_and_decrypt"
	KmsEndpoint_ValidateAndReencrypt_FullMethodName = "/kms.KmsEndpoint/Validate_and_reencrypt"
	KmsEndpoint_Decrypt_FullMethodName              = "/kms.KmsEndpoint/Decrypt"
	KmsEndpoint_Reencrypt_FullMethodName            = "/kms.KmsEndpoint/Reencrypt"
)

// KmsEndpointClient is the client API for KmsEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KmsEndpointClient interface {
	ValidateAndDecrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error)
	ValidateAndReencrypt(ctx context.Context, in *ReencryptionRequest, opts ...grpc.CallOption) (*ReencryptionResponse, error)
	Decrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error)
	Reencrypt(ctx context.Context, in *ReencryptionRequest, opts ...grpc.CallOption) (*ReencryptionResponse, error)
}

type kmsEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewKmsEndpointClient(cc grpc.ClientConnInterface) KmsEndpointClient {
	return &kmsEndpointClient{cc}
}

func (c *kmsEndpointClient) ValidateAndDecrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error) {
	out := new(DecryptionResponse)
	err := c.cc.Invoke(ctx, KmsEndpoint_ValidateAndDecrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsEndpointClient) ValidateAndReencrypt(ctx context.Context, in *ReencryptionRequest, opts ...grpc.CallOption) (*ReencryptionResponse, error) {
	out := new(ReencryptionResponse)
	err := c.cc.Invoke(ctx, KmsEndpoint_ValidateAndReencrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsEndpointClient) Decrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error) {
	out := new(DecryptionResponse)
	err := c.cc.Invoke(ctx, KmsEndpoint_Decrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kmsEndpointClient) Reencrypt(ctx context.Context, in *ReencryptionRequest, opts ...grpc.CallOption) (*ReencryptionResponse, error) {
	out := new(ReencryptionResponse)
	err := c.cc.Invoke(ctx, KmsEndpoint_Reencrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KmsEndpointServer is the server API for KmsEndpoint service.
// All implementations must embed UnimplementedKmsEndpointServer
// for forward compatibility
type KmsEndpointServer interface {
	ValidateAndDecrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error)
	ValidateAndReencrypt(context.Context, *ReencryptionRequest) (*ReencryptionResponse, error)
	Decrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error)
	Reencrypt(context.Context, *ReencryptionRequest) (*ReencryptionResponse, error)
	mustEmbedUnimplementedKmsEndpointServer()
}

// UnimplementedKmsEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedKmsEndpointServer struct {
}

func (UnimplementedKmsEndpointServer) ValidateAndDecrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndDecrypt not implemented")
}
func (UnimplementedKmsEndpointServer) ValidateAndReencrypt(context.Context, *ReencryptionRequest) (*ReencryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndReencrypt not implemented")
}
func (UnimplementedKmsEndpointServer) Decrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedKmsEndpointServer) Reencrypt(context.Context, *ReencryptionRequest) (*ReencryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reencrypt not implemented")
}
func (UnimplementedKmsEndpointServer) mustEmbedUnimplementedKmsEndpointServer() {}

// UnsafeKmsEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KmsEndpointServer will
// result in compilation errors.
type UnsafeKmsEndpointServer interface {
	mustEmbedUnimplementedKmsEndpointServer()
}

func RegisterKmsEndpointServer(s grpc.ServiceRegistrar, srv KmsEndpointServer) {
	s.RegisterService(&KmsEndpoint_ServiceDesc, srv)
}

func _KmsEndpoint_ValidateAndDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsEndpointServer).ValidateAndDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsEndpoint_ValidateAndDecrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsEndpointServer).ValidateAndDecrypt(ctx, req.(*DecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsEndpoint_ValidateAndReencrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReencryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsEndpointServer).ValidateAndReencrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsEndpoint_ValidateAndReencrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsEndpointServer).ValidateAndReencrypt(ctx, req.(*ReencryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsEndpoint_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsEndpointServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsEndpoint_Decrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsEndpointServer).Decrypt(ctx, req.(*DecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KmsEndpoint_Reencrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReencryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KmsEndpointServer).Reencrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KmsEndpoint_Reencrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KmsEndpointServer).Reencrypt(ctx, req.(*ReencryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KmsEndpoint_ServiceDesc is the grpc.ServiceDesc for KmsEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KmsEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.KmsEndpoint",
	HandlerType: (*KmsEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate_and_decrypt",
			Handler:    _KmsEndpoint_ValidateAndDecrypt_Handler,
		},
		{
			MethodName: "Validate_and_reencrypt",
			Handler:    _KmsEndpoint_ValidateAndReencrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _KmsEndpoint_Decrypt_Handler,
		},
		{
			MethodName: "Reencrypt",
			Handler:    _KmsEndpoint_Reencrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms.proto",
}
